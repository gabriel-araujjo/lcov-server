#!/usr/bin/env node

const {ArgumentParser} = require('argparse');
const fs = require('fs');
const updateNotifier = require('update-notifier');
const cli = require('../cli');
const pkg = require('../package.json');
const path = require('path')

updateNotifier({pkg}).notify();

const argsParser = new ArgumentParser({
  version: '0.0.1',
  addHelp: true,
  description: 'Upload coverage report to a server'
});

const availableParsers = Object.keys(require('../cli/parsers')).join(', ');
argsParser.addArgument(['-r', '--report'], {
  help: `default: gcov; options: ${availableParsers}`,
  defaultValue: 'gcov'
});

argsParser.addArgument(
    ['-C', '--directory'],
    {help: 'Change to directory DIR.', optionStrings: 'DIR'});

argsParser.addArgument(
    'file', {nargs: '?', help: 'Report to be uploaded (default: stdin)'});

argsParser.addArgument(
    ['-u', '--url'],
    {nargs: '1', help: 'URL where report will upload to.', required: true});

argsParser.addArgument(
    ['-e', '--exclude'],
    {nargs: '+', help: 'Exclude file or glob', defaultValue: []});

const args = argsParser.parseArgs();

if (args.directory) process.chdir(args.directory);

const excludes = args.exclude.map(e => {
  e = path.resolve(e)
  const parts = [];
  for (const p of e.split('/')) {
    if (p === '**') {
      parts.push('.*');
      continue;
    }
    parts.push(p.replace('.', '\\.').replace(/\*+/, '[^\\/]+'));
  }
  return new RegExp(parts.join('\\/'));
});

const parser = args.report;
const input = args.file ? fs.createReadStream(args.file) : process.stdin;
const shouldExclude = file => {
  // skip files outside project
  if (!path.resolve(file).startsWith(process.cwd())) return false;

  // test used  
  for (const regexp of excludes) {
    if (regexp.test(file)) return false;
  }
  return true;
};
const url = args.url[0];

cli({parser, input, shouldExclude, url})
    .then(location => {
      console.error(`coverage sent successfully to ðŸ’š`);
      console.error(`you can access the report at ${location}`);
    })
    .catch(err => {
      console.error('Cannot upload report ðŸ˜“')
      console.error(err.message);
      process.exit(1);
    });
